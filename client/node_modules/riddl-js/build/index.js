"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Provider = exports.connect = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GlobalContext = _react2.default.createContext();

/*
* @param {function} Component - React component
* @callback mapStateToProps - portion of state object to assign to props
* @param {object} transmitters - callback functions to assign to props
* @returns {object} React Context.Consumer instance containing global state
*/
var connect = exports.connect = function connect(Component, mapStateToProps) {
    var transmitters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return function (props) {
        var _mapTransmittersToProps = function _mapTransmittersToProps(transmitters, setGlobalState) {
            var output = {};

            var _loop = function _loop(func) {
                output[func] = function () {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return transmitters[func].apply(null, args)(setGlobalState);
                };
            };

            for (var func in transmitters) {
                _loop(func);
            }
            return output;
        };
        return _react2.default.createElement(
            GlobalContext.Consumer,
            null,
            function (_ref) {
                var globalState = _ref.globalState,
                    setGlobalState = _ref.setGlobalState;

                var mappedState = mapStateToProps ? mapStateToProps(globalState) : globalState;
                var mappedTransmitters = _mapTransmittersToProps(transmitters, setGlobalState);
                return _react2.default.createElement(Component, _extends({ setGlobalState: setGlobalState }, mappedState, mappedTransmitters, props));
            }
        );
    };
};

var Provider = exports.Provider = function (_Component) {
    _inherits(Provider, _Component);

    function Provider(props) {
        _classCallCheck(this, Provider);

        var _this = _possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).call(this, props));

        _this.state = props.globalState;
        return _this;
    }

    _createClass(Provider, [{
        key: "render",
        value: function render() {
            return _react2.default.createElement(
                GlobalContext.Provider,
                { value: { globalState: this.state, setGlobalState: this.setState.bind(this) } },
                this.props.children
            );
        }
    }]);

    return Provider;
}(_react.Component);

Provider.propTypes = {
    globalState: _propTypes2.default.object.isRequired,
    children: _propTypes2.default.element.isRequired
};